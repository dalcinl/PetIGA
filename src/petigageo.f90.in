! -*- f90 -*-

pure subroutine GeometryMap(&
     order,&
     nen,X,&
     N0,N1,N2,N3,&
     R0,R1,R2,R3,&
     dX,X1,E1,X2,E2)
  use PetIGA
  implicit none
  !integer(kind=IGA_INTEGER_KIND),parameter   :: dim = 1,2,3
  integer(kind=IGA_INTEGER_KIND), intent(in)  :: order
  integer(kind=IGA_INTEGER_KIND), intent(in)  :: nen
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: X(dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: N0(            nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: N1(        dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: N2(    dim,dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: N3(dim,dim,dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: R0(            nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: R1(        dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: R2(    dim,dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: R3(dim,dim,dim,nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: dX
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X1(dim,dim)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: E1(dim,dim)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X2(dim,dim,dim)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: E2(dim,dim,dim)

  real   (kind=IGA_REAL_KIND   )  :: X3(dim,dim,dim,dim)
  real   (kind=IGA_REAL_KIND   )  :: E3(dim,dim,dim,dim)
  integer(kind=IGA_INTEGER_KIND)  :: node
  integer(kind=IGA_INTEGER_KIND)  :: i, j, k, l
  integer(kind=IGA_INTEGER_KIND)  :: a, b, c, d

  ! gradient of the mapping
  X1 = matmul(N1,transpose(X))
  dX = Determinant(dim,X1)
  E1 = Inverse(dim,dX,X1)

  ! 0th derivatives
  R0 = N0

  ! 1st derivatives
  if (order < 1) return
  R1 = 0 ! matmul(E1,N1)
  do node = 1,nen
     do i = 1,dim
        do a = 1,dim
           R1(i,node) = R1(i,node) + N1(a,node)*E1(i,a)
        end do
     end do
  end do

  ! 2nd derivatives
  if (order < 2) return
  X2 = 0
  do node = 1,nen
     do i = 1,dim
        do a = 1,dim
           do b = 1,dim
              X2(b,a,i) = X2(b,a,i) + X(i,node)*N2(b,a,node)
           end do
        end do
     end do
  end do
  E2 = 0
  do i = 1,dim
     do j = 1,dim
        do k = 1,dim
           do a = 1,dim
              do b = 1,dim
                 do c = 1,dim
                    E2(j,i,c) = E2(j,i,c) - X2(b,a,k)*E1(i,a)*E1(j,b)*E1(k,c)
                 end do
              end do
           end do
        end do
     end do
  end do
  R2 = 0
  do node = 1,nen
     do i = 1,dim
        do j = 1,dim
           do a = 1,dim
              do b = 1,dim
                 R2(j,i,node) = R2(j,i,node) + N2(b,a,node)*E1(i,a)*E1(j,b)
              end do
              R2(j,i,node) = R2(j,i,node) + N1(a,node)*E2(j,i,a)
           end do
        end do
     end do
  end do

  ! 3rd derivatives
  if (order < 3) return
  X3 = 0
  do node = 1,nen
     do i = 1,dim
        do a = 1,dim
           do b = 1,dim
              do c = 1,dim
                 X3(c,b,a,i) = X3(c,b,a,i) &
                      +X(i,node)*N3(c,b,a,node)
              end do
           end do
        end do
     end do
  end do
  E3 = 0
  do d = 1,dim
     do i = 1,dim
        do j = 1,dim
           do k = 1,dim
              do a = 1,dim
                 do b = 1,dim
                    do l = 1,dim
                       do c = 1,dim
                          E3(k,j,i,d) = E3(k,j,i,d) &
                               -X3(c,b,a,l)*E1(i,a)*E1(j,b)*E1(k,c)*E1(l,d)
                       end do
                       E3(k,j,i,d) = E3(k,j,i,d) &
                            -X2(b,a,l)*( &
                            +E1(i,a)*E2(k,j,b) &
                            +E1(j,b)*E2(k,i,a) &
                            +E1(k,b)*E2(j,i,a))*E1(l,d)
                    end do
                 end do
              end do
           end do
        end do
     end do
  end do
  R3 = 0
  do node = 1,nen
     do i = 1,dim
        do j = 1,dim
           do k = 1,dim
              do a = 1,dim
                 do b = 1,dim
                    do c = 1,dim
                       R3(k,j,i,node) = R3(k,j,i,node) &
                            +N3(c,b,a,node)*E1(i,a)*E1(j,b)*E1(k,c)
                    end do
                    R3(k,j,i,node) = R3(k,j,i,node) &
                         +N2(b,a,node)*( &
                         +E1(i,a)*E2(k,j,b) &
                         +E1(j,b)*E2(k,i,a) &
                         +E1(k,b)*E2(j,i,a))
                 end do
                 R3(k,j,i,node) = R3(k,j,i,node) &
                      +N1(a,node)*E3(k,j,i,a)
              end do
           end do
        end do
     end do
  end do

end subroutine GeometryMap

include 'petigainv.f90.in'
