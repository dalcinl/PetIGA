! -*- f90 -*-

pure subroutine GeometryMap(&
     order,&
     nen,X,&
     M0,M1,M2,M3,M4,&
     X0,X1,X2,X3,X4)
  implicit none
  !integer(kind=IGA_INTEGER_KIND),parameter   :: dim = 1,2,3
  !integer(kind=IGA_INTEGER_KIND),parameter   :: nsd = 1,2,3
  integer(kind=IGA_INTEGER_KIND), intent(in)  :: order
  integer(kind=IGA_INTEGER_KIND), intent(in)  :: nen
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: X(    nsd,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: M0(dim**0,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: M1(dim**1,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: M2(dim**2,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: M3(dim**3,nen)
  real   (kind=IGA_REAL_KIND   ), intent(in)  :: M4(dim**4,nen)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X0(dim**0,nsd)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X1(dim**1,nsd)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X2(dim**2,nsd)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X3(dim**3,nsd)
  real   (kind=IGA_REAL_KIND   ), intent(out) :: X4(dim**4,nsd)

  integer(kind=IGA_INTEGER_KIND)  :: node, i

  ! 0th derivatives
  X0 = 0 ! MATMUL(M0,transpose(X))
  do node = 1,nen
     do i = 1,nsd
        X0(:,i) = X0(:,i) + X(i,node)*M0(:,node)
     end do
  end do

  ! 1st derivatives
  if (order < 1) return
  X1 = 0 ! MATMUL(M1,transpose(X))
  do node = 1,nen
     do i = 1,nsd
        X1(:,i) = X1(:,i) + X(i,node)*M1(:,node)
     end do
  end do

  ! 2nd derivatives
  if (order < 2) return
  X2 = 0 ! MATMUL(M2,transpose(X))
  do node = 1,nen
     do i = 1,nsd
        X2(:,i) = X2(:,i) + X(i,node)*M2(:,node)
     end do
  end do

  ! 3rd derivatives
  if (order < 3) return
  X3 = 0 ! MATMUL(M3,transpose(X))
  do node = 1,nen
     do i = 1,nsd
        X3(:,i) = X3(:,i) + X(i,node)*M3(:,node)
     end do
  end do

  ! 4th derivatives
  if (order < 4) return
  X4 = 0 ! MATMUL(M4,transpose(X))
  do node = 1,nen
     do i = 1,nsd
        X4(:,i) = X4(:,i) + X(i,node)*M4(:,node)
     end do
  end do

end subroutine GeometryMap
